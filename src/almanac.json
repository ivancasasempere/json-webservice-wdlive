<?php header('content-type: application/json; charset=utf-8');

# Copyright 2015 Wayne D Grant (www.waynedgrant.com)
# Licensed under the MIT License

require_once("config.php");
require_once("common.php");
require_once("ClientRaw.php");
require_once("ClientRawExtra.php");

function createAlmanacMeasurement($measurement, $measurementTime)
{
    $almanacMeasurement = $measurement->getAllMeasures();
    $almanacMeasurement['time'] = $measurementTime->getAllValues();
    return $almanacMeasurement;
}

function createAlmanacWindMeasurement($speedMeasurement, $directionMeasurement, $measurementTime)
{
    return array(
        "speed" => $speedMeasurement->getAllMeasures(),
        "direction" => $directionMeasurement->getAllMeasures(),
        "time" => $measurementTime->getAllValues());
}

function createMonthToDate($clientRawExtra, $dateAndTime)
{
    $highOutdoorTemperature = createAlmanacMeasurement(
        $clientRawExtra->getMonthlyHighOutdoorTemperature(), $clientRawExtra->getMonthlyHighOutdoorTemperatureDateAndTime());

    $lowOutdoorTemperature = createAlmanacMeasurement(
        $clientRawExtra->getMonthlyLowOutdoorTemperature(), $clientRawExtra->getMonthlyLowOutdoorTemperatureDateAndTime());

    $highPressure = createAlmanacMeasurement(
        $clientRawExtra->getMonthlyHighSurfacePressure(), $clientRawExtra->getMonthlyHighSurfacePressureDateAndTime());

    $lowPressure = createAlmanacMeasurement(
        $clientRawExtra->getMonthlyLowSurfacePressure(), $clientRawExtra->getMonthlyLowSurfacePressureDateAndTime());

    $maximumRainfallRate = createAlmanacMeasurement(
        $clientRawExtra->getMonthlyMaximumRainfallRate(), $clientRawExtra->getMonthlyMaximumRainfallRateDateAndTime());

    $maximumAverageWindSpeed = createAlmanacWindMeasurement(
        $clientRawExtra->getMonthlyMaximumAverageWindSpeed(), $clientRawExtra->getMonthlyMaximumAverageWindSpeedDirection(),
        $clientRawExtra->getMonthlyMaximumAverageWindSpeedDateAndTime());

    $maximumGustSpeed = createAlmanacWindMeasurement(
        $clientRawExtra->getMonthlyMaximumGustSpeed(), $clientRawExtra->getMonthlyMaximumGustSpeedDirection(),
        $clientRawExtra->getMonthlyMaximumGustSpeedDateAndTime());

    $highDewPoint = createAlmanacMeasurement(
        $clientRawExtra->getMonthlyHighDewPoint(), $clientRawExtra->getMonthlyHighDewPointDateAndTime());

    $lowDewPoint = createAlmanacMeasurement(
        $clientRawExtra->getMonthlyLowDewPoint(), $clientRawExtra->getMonthlyLowDewPointDateAndTime());

    $lowWindChill = createAlmanacMeasurement(
        $clientRawExtra->getMonthlyLowWindChill(), $clientRawExtra->getMonthlyLowWindChillDateAndTime());

    $highHeatIndex = createAlmanacMeasurement(
        $clientRawExtra->getMonthlyHighHeatIndex(), $clientRawExtra->getMonthlyHighHeatIndexDateAndTime());

    $highUv = createAlmanacMeasurement(
        $clientRawExtra->getMonthlyHighUv(), $clientRawExtra->getMonthlyHighUvDateAndTime());

    return array(
        "month" => $dateAndTime->getMonth(),
        "year" => $dateAndTime->getYear(),
        "temperature" => array("high" => $highOutdoorTemperature, "low" => $lowOutdoorTemperature),
        "pressure" => array("high" => $highPressure, "low" => $lowPressure),
        "rainfall" => array("max_rate_per_min" => $maximumRainfallRate),
        "wind" => array("max_avg" => $maximumAverageWindSpeed, "max_gust" => $maximumGustSpeed),
        "dew_point" => array("high" => $highDewPoint, "low" => $lowDewPoint),
        "wind_chill" => array("low" => $lowWindChill),
        "heat_index" => array("high" => $highHeatIndex),
        "uv" => array("high" => $highUv));
}

function createYearToDate($clientRawExtra, $dateAndTime)
{
    $highOutdoorTemperature = createAlmanacMeasurement(
        $clientRawExtra->getYearlyHighOutdoorTemperature(), $clientRawExtra->getYearlyHighOutdoorTemperatureDateAndTime());

    $lowOutdoorTemperature = createAlmanacMeasurement(
        $clientRawExtra->getYearlyLowOutdoorTemperature(), $clientRawExtra->getYearlyLowOutdoorTemperatureDateAndTime());

    $highPressure = createAlmanacMeasurement(
        $clientRawExtra->getYearlyHighSurfacePressure(), $clientRawExtra->getYearlyHighSurfacePressureDateAndTime());

    $lowPressure = createAlmanacMeasurement(
        $clientRawExtra->getYearlyLowSurfacePressure(), $clientRawExtra->getYearlyLowSurfacePressureDateAndTime());

    $maximumRainfallRate = createAlmanacMeasurement(
        $clientRawExtra->getYearlyMaximumRainfallRate(), $clientRawExtra->getYearlyMaximumRainfallRateDateAndTime());

    $maximumAverageWindSpeed = createAlmanacWindMeasurement(
        $clientRawExtra->getYearlyMaximumAverageWindSpeed(), $clientRawExtra->getYearlyMaximumAverageWindSpeedDirection(),
        $clientRawExtra->getYearlyMaximumAverageWindSpeedDateAndTime());

    $maximumGustSpeed = createAlmanacWindMeasurement(
        $clientRawExtra->getYearlyMaximumGustSpeed(), $clientRawExtra->getYearlyMaximumGustSpeedDirection(),
        $clientRawExtra->getYearlyMaximumGustSpeedDateAndTime());

    $highDewPoint = createAlmanacMeasurement(
        $clientRawExtra->getYearlyHighDewPoint(), $clientRawExtra->getYearlyHighDewPointDateAndTime());

    $lowDewPoint = createAlmanacMeasurement(
        $clientRawExtra->getYearlyLowDewPoint(), $clientRawExtra->getYearlyLowDewPointDateAndTime());

    $lowWindChill = createAlmanacMeasurement(
        $clientRawExtra->getYearlyLowWindChill(), $clientRawExtra->getYearlyLowWindChillDateAndTime());

    $highHeatIndex = createAlmanacMeasurement(
        $clientRawExtra->getYearlyHighHeatIndex(), $clientRawExtra->getYearlyHighHeatIndexDateAndTime());

    $highUv = createAlmanacMeasurement(
        $clientRawExtra->getYearlyHighUv(), $clientRawExtra->getYearlyHighUvDateAndTime());

    return array(
        "year" => $dateAndTime->getYear(),
        "temperature" => array("high" => $highOutdoorTemperature, "low" => $lowOutdoorTemperature),
        "pressure" => array("high" => $highPressure, "low" => $lowPressure),
        "rainfall" => array("max_rate_per_min" => $maximumRainfallRate),
        "wind" => array("max_avg" => $maximumAverageWindSpeed, "max_gust" => $maximumGustSpeed),
        "dew_point" => array("high" => $highDewPoint, "low" => $lowDewPoint),
        "wind_chill" => array("low" => $lowWindChill),
        "heat_index" => array("high" => $highHeatIndex),
        "uv" => array("high" => $highUv));
}

function createAllTime($clientRawExtra)
{
    $highOutdoorTemperature = createAlmanacMeasurement(
        $clientRawExtra->getAllTimeHighOutdoorTemperature(), $clientRawExtra->getAllTimeHighOutdoorTemperatureDateAndTime());

    $lowOutdoorTemperature = createAlmanacMeasurement(
        $clientRawExtra->getAllTimeLowOutdoorTemperature(), $clientRawExtra->getAllTimeLowOutdoorTemperatureDateAndTime());

    $highPressure = createAlmanacMeasurement(
        $clientRawExtra->getAllTimeHighSurfacePressure(), $clientRawExtra->getAllTimeHighSurfacePressureDateAndTime());

    $lowPressure = createAlmanacMeasurement(
        $clientRawExtra->getAllTimeLowSurfacePressure(), $clientRawExtra->getAllTimeLowSurfacePressureDateAndTime());

    $maximumRainfallRate = createAlmanacMeasurement(
        $clientRawExtra->getAllTimeMaximumRainfallRate(), $clientRawExtra->getAllTimeMaximumRainfallRateDateAndTime());

    $maximumAverageWindSpeed = createAlmanacWindMeasurement(
        $clientRawExtra->getAllTimeMaximumAverageWindSpeed(), $clientRawExtra->getAllTimeMaximumAverageWindSpeedDirection(),
        $clientRawExtra->getAllTimeMaximumAverageWindSpeedDateAndTime());

    $maximumGustSpeed = createAlmanacWindMeasurement(
        $clientRawExtra->getAllTimeMaximumGustSpeed(), $clientRawExtra->getAllTimeMaximumGustSpeedDirection(),
        $clientRawExtra->getAllTimeMaximumGustSpeedDateAndTime());

    $highDewPoint = createAlmanacMeasurement(
        $clientRawExtra->getAllTimeHighDewPoint(), $clientRawExtra->getAllTimeHighDewPointDateAndTime());

    $lowDewPoint = createAlmanacMeasurement(
        $clientRawExtra->getAllTimeLowDewPoint(), $clientRawExtra->getAllTimeLowDewPointDateAndTime());

    $lowWindChill = createAlmanacMeasurement(
        $clientRawExtra->getAllTimeLowWindChill(), $clientRawExtra->getAllTimeLowWindChillDateAndTime());

    $highHeatIndex = createAlmanacMeasurement(
        $clientRawExtra->getAllTimeHighHeatIndex(), $clientRawExtra->getAllTimeHighHeatIndexDateAndTime());

    $highUv = createAlmanacMeasurement(
        $clientRawExtra->getAllTimeHighUv(), $clientRawExtra->getAllTimeHighUvDateAndTime());

    return array(
        "temperature" => array("high" => $highOutdoorTemperature, "low" => $lowOutdoorTemperature),
        "pressure" => array("high" => $highPressure, "low" => $lowPressure),
        "rainfall" => array("max_rate_per_min" => $maximumRainfallRate),
        "wind" => array("max_avg" => $maximumAverageWindSpeed, "max_gust" => $maximumGustSpeed),
        "dew_point" => array("high" => $highDewPoint, "low" => $lowDewPoint),
        "wind_chill" => array("low" => $lowWindChill),
        "heat_index" => array("high" => $highHeatIndex),
        "uv" => array("high" => $highUv));
}

$clientRaw = new ClientRaw(CLIENT_RAW_DIRECTORY . "clientraw.txt");
$clientRawExtra = new ClientRawExtra(CLIENT_RAW_DIRECTORY . "clientrawextra.txt");

$dateAndTime = $clientRaw->getCurrentDateAndTime();

$data = array(
    "endpoint" => createEndpoint(),
    "station" => createStation($clientRaw),
    "time" => $dateAndTime->getAllValues(),
    "month_to_date" => createMonthToDate($clientRawExtra, $dateAndTime),
    "year_to_date" => createYearToDate($clientRawExtra, $dateAndTime),
    "all_time" => createAllTime($clientRawExtra));

$json = json_encode($data);

echo isset($_GET['callback']) ? "{$_GET['callback']}($json)" : $json;

?>
